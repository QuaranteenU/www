{"version":3,"sources":["webpack:///./src/components/RSVPForm.js","webpack:///./src/pages/newgrad.js"],"names":["PWLB","styled","div","RSVPForm","fieldNames","userInfo","useState","coming","setComing","validated","setValidated","submitted","setSubmitted","Form","noValidate","onSubmit","event","preventDefault","form","currentTarget","checkValidity","stopPropagation","postURL","serialize","formRequest","Request","method","mode","fetch","then","res","status","Error","swal","title","icon","partyhat","text","button","reset","navigate","catch","error","console","Row","Group","as","Col","md","controlId","Label","Control","type","name","email","placeholder","defaultValue","pattern","simpleEmailPattern","required","Feedback","comingYesNo","onChange","e","target","value","Fragment","fullname","Text","className","list","degree","id","major","minor","honors","phonetic","href","timezone","logistics","quote","confirmMC","mcUsername","extra","rows","Button","disabled","FlexRow","RSVP","setEmail","setUserInfo","Layout","SEO","route","DeadlineChecker","date","closedContent","to","axios","post","data","rsvpd","signUpInfo","signedUp","rsvpdNew","role","err","InputGroup","Spinner","animation","variant"],"mappings":"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","file":"component---src-pages-newgrad-js-0fedbe640b2d2d923f74.js","sourcesContent":["import React, { useState } from \"react\";\nimport { navigate } from \"gatsby\";\nimport styled from \"styled-components\";\nimport swal from \"@sweetalert/with-react\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { OutboundLink } from \"gatsby-plugin-google-analytics\";\n\nimport partyhat from \"../images/party.png\";\nimport { simpleEmailPattern } from \"../util/regex\";\nimport serialize from \"../util/serialize\";\n\nconst PWLB = styled.div`\n  white-space: pre-wrap;\n`;\n\nconst RSVPForm = ({ fieldNames, userInfo }) => {\n  const [coming, setComing] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    } else {\n      setSubmitted(true);\n      const formId = \"1FAIpQLSc-ncgVvbSUNksTtWduj1dzd9XZIhZEKuuytRGIka0nqzKZiQ\";\n      const postURL = `https://docs.google.com/forms/d/e/${formId}/formResponse?${serialize(\n        form\n      )}`;\n      const config = {\n        method: \"GET\",\n        mode: \"no-cors\",\n      };\n\n      const formRequest = new Request(postURL, config);\n      fetch(formRequest)\n        .then(res => {\n          if (res.status === 0 || res.status === 200) {\n            swal({\n              title: \"Woohoo!\",\n              icon: partyhat,\n              text:\n                \"Thanks for RSVPing! Keep your eye out for updates regarding the event, as more details on the event schedule will be sent out soon. We can't wait to see you at commencement!\",\n              button: \"yuh\",\n            }).then(() => {\n              form.reset();\n              setSubmitted(false);\n              setValidated(false);\n              navigate(\"/\");\n            });\n          } else {\n            throw new Error(\"Request failed!\");\n          }\n        })\n        .catch(error => {\n          swal(\"Oh no!\", error, \"error\");\n          console.error(error);\n        });\n    }\n\n    setValidated(true);\n  };\n\n  return (\n    <Form noValidate validated={validated} onSubmit={handleSubmit}>\n      <PWLB>\n        <strong>\n          The wait is over — get ready to make history with us on May 22\n          <sup>nd</sup> in Minecraft!\n        </strong>\n        <br />\n        <br />\n        Please let us know whether you're coming so we can plan the coolest\n        event of the spring semester.\n        <br />\n        The logistics will roughly be:\n        <ol>\n          <li>\n            You let us know whether you're coming by May 12<sup>th</sup>.\n          </li>\n          <li>\n            We email you your commencement time at least a week before the\n            ceremony.\n          </li>\n          <li>\n            You are COMMENCED:\n            <ul>\n              <li>Have your name read</li>\n              <li>Walk the QU stage to get your personalized diploma</li>\n              <li>Rep your school colors, if you like</li>\n              <li>Say hi to your mom on stream</li>\n              <li>\n                Be immortalized as part of the ceremony that's been covered by\n                WIRED, The Verge, NBC News, The Boston Globe, Chronicle, and\n                many others\n              </li>\n            </ul>\n          </li>\n          <li>\n            Explore QU campus (it's really, really big) and mingle with other\n            graduates.\n          </li>\n        </ol>\n        <br />\n        You'll be on stage for 1 minute, but you can stay on the server as long\n        as you like before and after you walk.\n        <br />\n        <strong>\n          <i>\n            NOTE: Please use your university/college email! We need it to get\n            your school name and colors. :)\n          </i>\n        </strong>\n      </PWLB>\n      <br />\n      <br />\n\n      <Form.Row>\n        <Form.Group as={Col} md=\"6\" controlId=\"email\">\n          <Form.Label>Email Address</Form.Label>\n          <Form.Control\n            type=\"email\"\n            name={fieldNames.email}\n            placeholder=\"someone@gmail.com\"\n            defaultValue={userInfo.email ? userInfo.email : \"\"}\n            pattern={simpleEmailPattern}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Please enter a valid email address.\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group as={Col} md=\"6\" controlId=\"comingYesNo\">\n          <Form.Label>Are you coming to the ceremony on May 22nd?</Form.Label>\n          <Form.Control\n            as=\"select\"\n            name={fieldNames.comingYesNo}\n            onChange={e => setComing(e.target.value === \"Yes\")}\n            required\n          >\n            <option value=\"\">-- Select an option --</option>\n            <option>Yes</option>\n            <option>No</option>\n          </Form.Control>\n        </Form.Group>\n      </Form.Row>\n\n      {coming && (\n        <React.Fragment>\n          <h2>About you</h2>\n          <p>\n            We're so glad you're coming! All we need now is your degree\n            information, i.e. what will show up on your QU Diploma!\n          </p>\n\n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"fullname\">\n              <Form.Label>Your Full Name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={fieldNames.fullname}\n                placeholder=\"Graduating Gradperson\"\n                defaultValue={userInfo.name ? userInfo.name : \"\"}\n                required\n              />\n              <Form.Text className=\"text-muted\">\n                Please enter it the way you'd like it displayed on a diploma\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Col} md=\"6\" controlId=\"degree\">\n              <Form.Label>Your Degree</Form.Label>\n              <Form.Control\n                type=\"text\"\n                list=\"degreeOptions\"\n                name={fieldNames.degree}\n                required\n              />\n              <datalist id=\"degreeOptions\">\n                <option>Bachelor of Arts</option>\n                <option>Bachelor of Science</option>\n                <option>Master of Arts</option>\n                <option>Master of Science</option>\n                <option>Doctorate (PhD)</option>\n              </datalist>\n              <Form.Text className=\"text-muted\">\n                E.g. Bachelors, Masters, PhD, etc.\n              </Form.Text>\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"major\">\n              <Form.Label>Your Major(s)</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={fieldNames.major}\n                placeholder=\"Underwater Basketweaving\"\n                required\n              />\n            </Form.Group>\n\n            <Form.Group as={Col} md=\"6\" controlId=\"minor\">\n              <Form.Label>Your Minor(s)</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={fieldNames.minor}\n                placeholder=\"Aground Boxmaking\"\n              />\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col} md=\"4\" controlId=\"honors\">\n              <Form.Label>Anything else you'd like to include?</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={fieldNames.honors}\n                placeholder=\"Your answer\"\n              />\n              <Form.Text className=\"text-muted\">\n                (Optional) E.g. Latin honors, first-gen student, etc.\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Col} md=\"4\" controlId=\"phonetic\">\n              <Form.Label>Phonetic spelling of your name</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={fieldNames.phonetic}\n                placeholder=\"Your answer\"\n              />\n              <Form.Text className=\"text-muted\">\n                (Optional) So that we pronounce your name properly. Using IPA (\n                <OutboundLink href=\"https://www.ipachart.com/\">\n                  https://www.ipachart.com/\n                </OutboundLink>\n                ) would be extra helpful!\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Col} md=\"4\" controlId=\"timezone\">\n              <Form.Label>Your Timezone</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={fieldNames.timezone}\n                placeholder=\"GMT\"\n                defaultValue={userInfo.timezone ? userInfo.timezone : \"\"}\n                required\n              />\n              <Form.Text className=\"text-muted\">\n                The timezone that you're currently in. Refer to\n                <OutboundLink href=\"https://www.timeanddate.com/time/current-number-time-zones.html\">\n                  https://www.timeanddate.com/time/current-number-time-zones.html\n                </OutboundLink>\n                .\n              </Form.Text>\n            </Form.Group>\n          </Form.Row>\n\n          <h3>Logistics</h3>\n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"logistics\">\n              <Form.Label>\n                Would you prefer to graduate with students from your school or\n                students in your timezone?\n              </Form.Label>\n              <Form.Control as=\"select\" name={fieldNames.logistics} required>\n                <option value=\"\">-- Select an option --</option>\n                <option>By School</option>\n                <option>By Timezone</option>\n              </Form.Control>\n              <Form.Text className=\"text-muted\">\n                This is so we don't wake you up at a crazy hour to play\n                Minecraft. When we say \"timezone\", we mean the timezone you're\n                currently living in.\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Col} md=\"6\" controlId=\"quote\">\n              <Form.Label>\n                Senior quote?\n                <br />\n              </Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={fieldNames.quote}\n                placeholder=\"Your answer\"\n              />\n              <Form.Text className=\"text-muted\">\n                (Optional) This will be read on stream by a text-to speech bot\n                when you go on stage! Just don't offend anyone, lol.\n              </Form.Text>\n            </Form.Group>\n          </Form.Row>\n\n          <h3>One last thing...</h3>\n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"confirmMC\">\n              <Form.Label>\n                I confirm I have a Minecraft Java Edition account or will get\n                one before the ceremony\n              </Form.Label>\n              <Form.Control as=\"select\" name={fieldNames.confirmMC} required>\n                <option value=\"\">-- Select an option --</option>\n                <option>Yup, I got it!</option>\n                <option>\n                  I can't get a copy by then but I'm fine with an NPC walking\n                  for me\n                </option>\n              </Form.Control>\n              <Form.Text className=\"text-muted\">\n                You'll need this to log onto the graduation server -- $26.95\n                from{\" \"}\n                <OutboundLink href=\"https://www.minecraft.net/en-us/store/minecraft-java-edition\">\n                  https://www.minecraft.net/en-us/store/minecraft-java-edition\n                </OutboundLink>{\" \"}\n                (If you can't get a copy in time for the ceremony, we can have\n                an NPC with your name walk across the stage when it's your\n                turn!)\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group as={Col} md=\"6\" controlId=\"mcUsername\">\n              <Form.Label>Your Minecraft Username</Form.Label>\n              <Form.Control\n                type=\"text\"\n                name={fieldNames.mcUsername}\n                placeholder=\"MCNewGrad2020\"\n                required\n              />\n              <Form.Text className=\"text-muted\">\n                You can sign up for an account without purchasing the game right\n                away here:{\" \"}\n                <OutboundLink href=\"https://account.mojang.com/\">\n                  https://account.mojang.com/\n                </OutboundLink>{\" \"}\n                (Write \"NPC\" if you are requesting an NPC to walk)\n              </Form.Text>\n            </Form.Group>\n          </Form.Row>\n\n          <Form.Row>\n            <Form.Group as={Col} md=\"6\" controlId=\"extra\">\n              <Form.Label>Anything else you'd like to tell us?</Form.Label>\n              <Form.Control as=\"textarea\" name={fieldNames.extra} rows=\"3\" />\n            </Form.Group>\n          </Form.Row>\n        </React.Fragment>\n      )}\n\n      <Button type=\"submit\" className=\"wiggle\" disabled={submitted}>\n        Hype hype\n      </Button>\n    </Form>\n  );\n};\n\nexport default RSVPForm;\n","import React, { useState } from \"react\";\nimport { Link } from \"gatsby\";\nimport { OutboundLink } from \"gatsby-plugin-google-analytics\";\nimport styled from \"styled-components\";\nimport axios from \"axios\";\nimport swal from \"@sweetalert/with-react\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\n\nimport Layout from \"../components/Layout\";\nimport SEO from \"../components/SEO\";\nimport RSVPForm from \"../components/RSVPForm\";\nimport DeadlineChecker from \"../components/DeadlineChecker\";\nimport { simpleEmailPattern } from \"../util/regex\";\nimport partyhat from \"../images/party.png\";\n\nconst FlexRow = styled(Form.Row)`\n  display: flex;\n  align-items: center;\n\n  & > * {\n    margin-right: 15px;\n  }\n`;\n\nconst RSVP = () => {\n  const [validated, setValidated] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [userInfo, setUserInfo] = useState(null);\n\n  const handleEmailChange = event => setEmail(event.target.value);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    } else {\n      setSubmitted(true);\n      axios\n        .post(\n          \"https://us-central1-quaranteen-university-276618.cloudfunctions.net/checkEmail\",\n          {\n            email,\n            event: \"QU\",\n          }\n        )\n        .then(res => {\n          const { rsvpd, signUpInfo, signedUp, rsvpdNew } = res.data;\n\n          if ((rsvpd && signedUp) || rsvpdNew) {\n            swal({\n              title: \"Woohoo!\",\n              icon: partyhat,\n              text: \"You're already RSVP'd! Nice work!\",\n              button: \"yuh\",\n            });\n          } else if (signUpInfo && signUpInfo.role === \"Audience\") {\n            swal({\n              title: \"Woohoo!\",\n              icon: partyhat,\n              text:\n                \"You're an audience member, so we don't need to collect your virtual diploma information. All you need to do is show up the day of! See you at commencement!\",\n              button: \"yuh\",\n            });\n          } else if (!(rsvpd || rsvpdNew) && signedUp) {\n            swal({\n              title: \"Time to RSVP!\",\n              text:\n                \"Thanks for registering your interest earlier! All we need now is your virtual diploma information (full name, major, minor, etc.) and you're all set!\",\n              button: \"yuh\",\n            });\n            setUserInfo(res.data.signUpInfo);\n          } else if (!(rsvpd || rsvpdNew) && !signedUp) {\n            swal({\n              title: \"Hi there!\",\n              text:\n                \"Looks like you didn't register for commencement earlier, but luckily for you our RSVP form is open! You'll just need to enter some extra info that the original signup form asked for (like your timezone).\",\n              button: \"yuh\",\n            });\n            setUserInfo({ email });\n          }\n          setSubmitted(false);\n        })\n        .catch(err => {\n          setSubmitted(false);\n          console.error(err);\n        });\n    }\n\n    setValidated(true);\n  };\n\n  const fieldNames = {\n    email: \"entry.89022382\",\n    comingYesNo: \"entry.2074410333\",\n    fullname: \"entry.891515203\",\n    timezone: \"entry.686409048\",\n    degree: \"entry.700114343\",\n    major: \"entry.569807986\",\n    minor: \"entry.692255109\",\n    honors: \"entry.1397466450\",\n    phonetic: \"entry.1064113496\",\n    logistics: \"entry.956435478\",\n    quote: \"entry.631727165\",\n    confirmMC: \"entry.351728367\",\n    mcUsername: \"entry.1256404244\",\n    extra: \"entry.1515720683\",\n  };\n\n  return (\n    <Layout>\n      <SEO title=\"Commencement RSVP\" route=\"/newgrad\" />\n      <DeadlineChecker\n        date=\"05/13/2020\"\n        closedContent={\n          <React.Fragment>\n            <h1>RSVP Closed!</h1>\n            <p className=\"lead\">\n              In order to ensure that our team has enough time to schedule all\n              the interested students, we had to close our RSVP form. We're\n              sorry if you weren't able to sign up before the deadline, but we'd\n              still love your support if you watched the event on{\" \"}\n              <OutboundLink href=\"https://www.twitch.tv/QuaranteenU\">\n                Twitch\n              </OutboundLink>\n              !\n            </p>\n          </React.Fragment>\n        }\n      >\n        <h1>RSVP for Commencement!</h1>\n        <p className=\"lead\">\n          Fill out your info for your virtual diploma! <em>NOTE:</em> This is\n          for the college/university commencement ceremony. If you're looking\n          for the high school graduation ceremony, RSVP{\" \"}\n          <Link to=\"/academygrad\">here</Link>!\n          <br />\n          <small className=\"text-muted\">\n            <em>\n              RSVPs close{\" \"}\n              <strong>\n                May 12<sup>th</sup>\n              </strong>{\" \"}\n              at <strong>midnight</strong>!\n            </em>\n          </small>\n        </p>\n\n        {!userInfo ? (\n          <Form noValidate validated={validated} onSubmit={handleSubmit}>\n            <Form.Row>\n              <Form.Group as={Col} md=\"6\" controlId=\"email\">\n                <Form.Label>School Email Address</Form.Label>\n                <InputGroup>\n                  <Form.Control\n                    type=\"email\"\n                    placeholder=\"newgrad@school.edu\"\n                    pattern={simpleEmailPattern}\n                    value={email}\n                    onChange={handleEmailChange}\n                    required\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    Please enter a valid email address.\n                  </Form.Control.Feedback>\n                </InputGroup>\n              </Form.Group>\n            </Form.Row>\n\n            <FlexRow>\n              <Button type=\"submit\" className=\"wiggle\" disabled={submitted}>\n                Check Status\n              </Button>\n              {submitted && (\n                <React.Fragment>\n                  <span>Looking you up in our database...</span>\n                  <Spinner animation=\"border\" variant=\"primary\" />\n                </React.Fragment>\n              )}\n            </FlexRow>\n          </Form>\n        ) : (\n          <RSVPForm fieldNames={fieldNames} userInfo={userInfo} />\n        )}\n      </DeadlineChecker>\n    </Layout>\n  );\n};\n\nexport default RSVP;\n"],"sourceRoot":""}